'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

exports.extractValueWithPath = extractValueWithPath;

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var ResolveValue = exports.ResolveValue = function () {
  function ResolveValue() {
    _classCallCheck(this, ResolveValue);
  }

  _createClass(ResolveValue, [{
    key: 'getValue',

    // "getValue" should receive a context to extract the value
    value: function getValue() {
      throw new Error('Extending ResolveValue requires you to add a "getValue" method');
    }
  }]);

  return ResolveValue;
}();

function extractValueWithPath(obj, path) {
  return path.split('.').reduce(function (currentValue, key, index) {
    if (index > 0 && currentValue === undefined) {
      throw new Error('Cannot extract value at path "' + path + '" ("' + key + '" is not defined).');
    }

    return currentValue[key];
  }, obj);
}

var ResolveObject = function (_ResolveValue) {
  _inherits(ResolveObject, _ResolveValue);

  function ResolveObject(cvalue) {
    _classCallCheck(this, ResolveObject);

    var _this = _possibleConstructorReturn(this, (ResolveObject.__proto__ || Object.getPrototypeOf(ResolveObject)).call(this));

    _this.cvalue = cvalue;
    return _this;
  }

  _createClass(ResolveObject, [{
    key: 'getValue',
    value: function getValue(_ref) {
      var resolve = _ref.resolve;

      var cvalue = this.cvalue;
      if (resolve.isResolveValue(cvalue)) {
        return resolve.value(cvalue);
      }

      return Object.keys(cvalue).reduce(function (convertedObject, key) {
        convertedObject[key] = resolve.value(cvalue[key]);

        return convertedObject;
      }, {});
    }
  }]);

  return ResolveObject;
}(ResolveValue);

var resolveObject = exports.resolveObject = function resolveObject(obj) {
  return new ResolveObject(obj);
};
//# sourceMappingURL=ResolveValue.js.map
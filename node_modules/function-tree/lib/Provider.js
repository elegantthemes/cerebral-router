'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('./utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Provider = function () {
  function Provider(definition) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        _ref$wrap = _ref.wrap,
        wrap = _ref$wrap === undefined ? true : _ref$wrap,
        _ref$ignoreDefinition = _ref.ignoreDefinition,
        ignoreDefinition = _ref$ignoreDefinition === undefined ? false : _ref$ignoreDefinition;

    _classCallCheck(this, Provider);

    this.definition = definition;

    if (typeof definition === 'function') {
      return;
    }

    if (!ignoreDefinition) {
      this.verifyDefinition(definition);
    }

    this.wrap = wrap;

    this.ProviderConstructor = function (context) {
      this.context = context;
    };
    this.ProviderConstructor.prototype = definition;

    this.WrappedProviderConstructor = function (name, context) {
      this.context = context;
      this.providerName = name;
    };
    this.WrappedProviderConstructor.prototype = Object.keys(ignoreDefinition ? {} : definition).reduce(function (wrappedProvider, key) {
      var originalFunc = definition[key];

      wrappedProvider[key] = function () {
        var _this = this;

        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        var providerResult = originalFunc.apply(this, args);

        if ((0, _utils.isPromise)(providerResult)) {
          return providerResult.then(function (result) {
            _this.context.debugger.send({
              type: 'provider',
              datetime: Date.now(),
              method: _this.providerName + '.' + key,
              args: args,
              isPromise: true,
              isRejected: false,
              returnValue: (0, _utils.isPlainValue)(result) ? result : '[CAN_NOT_SERIALIZE]'
            });

            return result;
          }).catch(function (error) {
            _this.context.debugger.send({
              method: _this.providerName + '.' + key,
              args: args,
              isPromise: true,
              isRejected: true
            });

            throw error;
          });
        }

        this.context.debugger.send({
          type: 'provider',
          datetime: Date.now(),
          method: this.providerName + '.' + key,
          args: args,
          returnValue: (0, _utils.isPlainValue)(providerResult) ? providerResult : '[CAN_NOT_SERIALIZE]'
        });

        return providerResult;
      };

      return wrappedProvider;
    }, {});
  }

  _createClass(Provider, [{
    key: 'verifyDefinition',
    value: function verifyDefinition(definition) {
      if (this.ignoreDefinition) {
        return;
      }

      if ((typeof definition === 'undefined' ? 'undefined' : _typeof(definition)) !== 'object' || definition === null) {
        throw new Error('The definition passed as Provider is not valid');
      }

      Object.keys(definition).forEach(function (key) {
        if (typeof definition[key] !== 'function') {
          throw new Error('The property ' + key + ' passed to Provider is not a method');
        }
      });
    }
  }, {
    key: 'get',
    value: function get(context) {
      if (typeof this.definition === 'function') {
        return this.definition(context);
      }

      return new this.ProviderConstructor(context);
    }
  }, {
    key: 'getWrapped',
    value: function getWrapped(name, context) {
      if (typeof this.definition === 'function') {
        return this.definition(context);
      }

      return new this.WrappedProviderConstructor(name, context);
    }
  }]);

  return Provider;
}();

exports.default = Provider;
//# sourceMappingURL=Provider.js.map
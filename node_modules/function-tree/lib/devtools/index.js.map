{"version":3,"sources":["../../src/devtools/index.js"],"names":["default","Devtools","options","trees","latestExecutionId","version","init","ws","WebSocket","https","host","event","message","JSON","parse","data","type","sendInitial","tree","push","contextProviders","debugger","Provider","watchExecution","splice","indexOf","removeAllListeners","reduce","newTrees","forEach","remove","stringify","source","sendMessage","backlog","length","sendBulkMessage","isConnected","debuggingData","execution","functionDetails","payload","executionId","id","functionIndex","datetime","safeStringify","sendExecutionData","bind","send","context","props","wrapProvider","name","provider","Object","keys","wrappedProvider","key","originalFunc","args","method","apply","wrap","DevtoolsBase"],"mappings":"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","file":"index.js","sourcesContent":["/* global VERSION */\nimport Provider from '../Provider'\nimport DevtoolsBase from './base'\nimport WebSocket from 'universal-websocket-client'\n\n// Used by cerebral/devtools\nexport { default as DevtoolsBase } from './base'\n\nexport class Devtools extends DevtoolsBase {\n  constructor(options) {\n    super(options)\n    this.trees = []\n    this.latestExecutionId = null\n    this.version = VERSION\n    this.init()\n  }\n  createSocket() {\n    this.ws = new WebSocket(`${this.https ? 'wss' : 'ws'}://${this.host}`)\n  }\n  onMessage(event) {\n    const message = JSON.parse(event.data)\n    switch (message.type) {\n      case 'pong':\n        this.sendInitial()\n        break\n      case 'ping':\n        this.sendInitial()\n        break\n    }\n  }\n  add(tree) {\n    this.trees.push(tree)\n    tree.contextProviders.debugger = this.Provider()\n    this.watchExecution(tree, 'ft')\n  }\n  remove(tree) {\n    this.trees.splice(this.trees.indexOf(tree), 1)\n    delete tree.contextProviders.debugger\n\n    tree.removeAllListeners('start')\n    tree.removeAllListeners('end')\n    tree.removeAllListeners('pathStart')\n    tree.removeAllListeners('functionStart')\n    tree.removeAllListeners('functionEnd')\n    tree.removeAllListeners('error')\n  }\n  removeAll() {\n    const trees = this.trees.reduce((newTrees, tree) => {\n      newTrees.push(tree)\n      return newTrees\n    }, [])\n    trees.forEach((tree) => {\n      this.remove(tree)\n    })\n  }\n  sendInitial() {\n    const message = JSON.stringify({\n      type: 'init',\n      source: 'ft',\n      version: this.version,\n    })\n\n    this.sendMessage(message)\n    if (this.backlog.length) {\n      this.sendBulkMessage(this.backlog, 'ft')\n      this.backlog = []\n    }\n    this.isConnected = true\n  }\n  /*\n    Create the stringified message for the debugger. As we need to\n    store mutations with the default true \"storeMutations\" option used\n    by time travel and jumping between Cerebral apps, we are careful\n    not doing unnecessary stringifying.\n  */\n  createExecutionMessage(debuggingData, execution, functionDetails, payload) {\n    const type = 'execution'\n    const data = {\n      execution: {\n        executionId: execution.id,\n        functionIndex: functionDetails.functionIndex,\n        payload: payload,\n        datetime: execution.datetime,\n        data: debuggingData,\n      },\n    }\n\n    return this.safeStringify({\n      type: type,\n      source: 'ft',\n      version: this.version,\n      data: data,\n    })\n  }\n  Provider() {\n    const sendExecutionData = this.sendExecutionData.bind(this)\n\n    return new Provider(\n      {\n        send(data) {\n          sendExecutionData(\n            data,\n            this.context.execution,\n            this.context.functionDetails,\n            this.context.props\n          )\n        },\n        wrapProvider(name, provider) {\n          return Object.keys(provider).reduce((wrappedProvider, key) => {\n            const originalFunc = provider[key]\n\n            wrappedProvider[key] = (...args) => {\n              this.context.debugger.send({\n                method: `${name}.${key}`,\n                args: args,\n              })\n\n              return originalFunc.apply(provider, args)\n            }\n\n            return wrappedProvider\n          }, {})\n        },\n      },\n      {\n        wrap: false,\n      }\n    )\n  }\n}\n\nexport default Devtools\n"]}
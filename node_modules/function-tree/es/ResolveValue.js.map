{"version":3,"sources":["../src/ResolveValue.js"],"names":["ResolveValue","Error","extractValueWithPath","obj","path","split","reduce","currentValue","key","index","undefined","ResolveObject","cvalue","resolve","isResolveValue","value","Object","keys","convertedObject","resolveObject"],"mappings":";;;;;;;;AAAA,WAAaA,YAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACE;AADF,+BAEa;AACT,YAAM,IAAIC,KAAJ,CACJ,gEADI,CAAN;AAGD;AANH;;AAAA;AAAA;;AASA,OAAO,SAASC,oBAAT,CAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AAC9C,SAAOA,KAAKC,KAAL,CAAW,GAAX,EAAgBC,MAAhB,CAAuB,UAACC,YAAD,EAAeC,GAAf,EAAoBC,KAApB,EAA8B;AAC1D,QAAIA,QAAQ,CAAR,IAAaF,iBAAiBG,SAAlC,EAA6C;AAC3C,YAAM,IAAIT,KAAJ,oCAC6BG,IAD7B,YACwCI,GADxC,wBAAN;AAGD;;AAED,WAAOD,aAAaC,GAAb,CAAP;AACD,GARM,EAQJL,GARI,CAAP;AASD;;IAEKQ,a;;;AACJ,yBAAYC,MAAZ,EAAoB;AAAA;;AAAA;;AAElB,UAAKA,MAAL,GAAcA,MAAd;AAFkB;AAGnB;;;;mCAEqB;AAAA,UAAXC,OAAW,QAAXA,OAAW;;AACpB,UAAMD,SAAS,KAAKA,MAApB;AACA,UAAIC,QAAQC,cAAR,CAAuBF,MAAvB,CAAJ,EAAoC;AAClC,eAAOC,QAAQE,KAAR,CAAcH,MAAd,CAAP;AACD;;AAED,aAAOI,OAAOC,IAAP,CAAYL,MAAZ,EAAoBN,MAApB,CAA2B,UAACY,eAAD,EAAkBV,GAAlB,EAA0B;AAC1DU,wBAAgBV,GAAhB,IAAuBK,QAAQE,KAAR,CAAcH,OAAOJ,GAAP,CAAd,CAAvB;;AAEA,eAAOU,eAAP;AACD,OAJM,EAIJ,EAJI,CAAP;AAKD;;;;EAjByBlB,Y;;AAoB5B,OAAO,IAAMmB,gBAAgB,SAAhBA,aAAgB,CAAChB,GAAD;AAAA,SAAS,IAAIQ,aAAJ,CAAkBR,GAAlB,CAAT;AAAA,CAAtB","file":"ResolveValue.js","sourcesContent":["export class ResolveValue {\n  // \"getValue\" should receive a context to extract the value\n  getValue() {\n    throw new Error(\n      'Extending ResolveValue requires you to add a \"getValue\" method'\n    )\n  }\n}\n\nexport function extractValueWithPath(obj, path) {\n  return path.split('.').reduce((currentValue, key, index) => {\n    if (index > 0 && currentValue === undefined) {\n      throw new Error(\n        `Cannot extract value at path \"${path}\" (\"${key}\" is not defined).`\n      )\n    }\n\n    return currentValue[key]\n  }, obj)\n}\n\nclass ResolveObject extends ResolveValue {\n  constructor(cvalue) {\n    super()\n    this.cvalue = cvalue\n  }\n\n  getValue({ resolve }) {\n    const cvalue = this.cvalue\n    if (resolve.isResolveValue(cvalue)) {\n      return resolve.value(cvalue)\n    }\n\n    return Object.keys(cvalue).reduce((convertedObject, key) => {\n      convertedObject[key] = resolve.value(cvalue[key])\n\n      return convertedObject\n    }, {})\n  }\n}\n\nexport const resolveObject = (obj) => new ResolveObject(obj)\n"]}
{"version":3,"sources":["../../src/devtools/base.js"],"names":["Path","DevtoolsBase","https","host","reconnect","reconnectInterval","version","Error","backlog","isConnected","ws","doReconnect","sendInitial","bind","createSocket","onmessage","onMessage","event","setTimeout","init","addListeners","onopen","send","JSON","stringify","type","onerror","onclose","console","warn","stringifiedMessage","messages","source","message","data","sendMessage","tree","on","execution","payload","executionId","id","name","staticTree","datetime","executedBy","_execution","sendExecutionMessage","latestExecutionId","path","funcDetails","functionIndex","safeStringify","result","output","error","stack","func","function","toString","object","refs","key","value","isObject","Array","isArray","indexOf","push","debuggingData","functionDetails","createExecutionMessage"],"mappings":"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","file":"base.js","sourcesContent":["import Path from '../Path'\n\nexport class DevtoolsBase {\n  constructor({\n    https = false,\n    host = null,\n    reconnect = true,\n    reconnectInterval = 10000,\n  } = {}) {\n    this.host = host\n    this.https = https\n    this.version = 0\n    if (!this.host) {\n      throw new Error(`Devtools: You have to pass in the \"host\" option`)\n    }\n    this.backlog = []\n    this.isConnected = false\n    this.ws = null\n    this.reconnectInterval = reconnectInterval\n    this.doReconnect = reconnect\n\n    this.sendInitial = this.sendInitial.bind(this)\n  }\n  createSocket() {\n    throw new Error('You have to implement a \"createSocket\" method')\n  }\n  /*\n    Sets up the listeners to Chrome Extension or remote debugger\n  */\n  addListeners() {\n    this.createSocket()\n    this.ws.onmessage = this.onMessage.bind(this)\n  }\n  onMessage(event) {}\n  reconnect() {\n    setTimeout(() => {\n      this.init()\n    }, this.reconnectInterval)\n  }\n  /*\n    The debugger might be ready or it might not. The initial communication\n    with the debugger requires a \"ping\" -> \"pong\" to identify that it\n    is ready to receive messages.\n    1. Debugger is open when app loads\n      - Devtools sends \"ping\"\n      - Debugger sends \"pong\"\n      - Devtools sends \"init\"\n    2. Debugger is opened after app load\n      - Debugger sends \"ping\"\n      - Devtools sends \"init\"\n  */\n  init() {\n    this.addListeners()\n    this.ws.onopen = () => {\n      this.ws.send(JSON.stringify({ type: 'ping' }))\n    }\n    this.ws.onerror = () => {}\n    this.ws.onclose = () => {\n      this.isConnected = false\n\n      if (this.doReconnect) {\n        console.warn(\n          'Debugger application is not running on selected port... will reconnect automatically behind the scenes'\n        )\n        this.reconnect()\n      }\n    }\n  }\n  /*\n    Sends message to chrome extension or remote debugger\n  */\n  sendMessage(stringifiedMessage) {\n    this.ws.send(stringifiedMessage)\n  }\n  /*\n    Sends multiple message in one batch to debugger, causing debugger\n    also to synchronously run all updates before rendering\n  */\n  sendBulkMessage(messages, source) {\n    const message = JSON.stringify({\n      type: 'bulk',\n      source,\n      version: this.version,\n      data: {\n        messages,\n      },\n    })\n\n    this.sendMessage(message)\n  }\n  /*\n    Watches function tree for execution of signals. This is passed to\n    debugger to prevent time travelling when executing. It also tracks\n    latest executed signal for \"remember\" to know when signals can be\n    called again\n  */\n  watchExecution(tree, source) {\n    tree.on('start', (execution, payload) => {\n      const message = JSON.stringify({\n        type: 'executionStart',\n        source: source,\n        version: this.version,\n        data: {\n          execution: {\n            executionId: execution.id,\n            name: execution.name,\n            staticTree: execution.staticTree,\n            datetime: execution.datetime,\n            executedBy:\n              payload && payload._execution ? payload._execution : null,\n          },\n        },\n      })\n\n      this.sendExecutionMessage(message)\n    })\n    tree.on('end', (execution) => {\n      const message = JSON.stringify({\n        type: 'executionEnd',\n        source: source,\n        version: this.version,\n        data: {\n          execution: {\n            executionId: execution.id,\n          },\n        },\n      })\n      this.latestExecutionId = execution.id\n\n      this.sendExecutionMessage(message)\n    })\n    tree.on('pathStart', (path, execution, funcDetails) => {\n      const message = JSON.stringify({\n        type: 'executionPathStart',\n        source: source,\n        version: this.version,\n        data: {\n          execution: {\n            executionId: execution.id,\n            functionIndex: funcDetails.functionIndex,\n            path,\n          },\n        },\n      })\n\n      this.sendExecutionMessage(message)\n    })\n    tree.on('functionStart', (execution, funcDetails, payload) => {\n      const message = this.safeStringify({\n        type: 'execution',\n        source: source,\n        version: this.version,\n        data: {\n          execution: {\n            executionId: execution.id,\n            functionIndex: funcDetails.functionIndex,\n            payload,\n            data: null,\n          },\n        },\n      })\n\n      this.sendExecutionMessage(message)\n    })\n    tree.on('functionEnd', (execution, funcDetails, payload, result) => {\n      if (!result || (result instanceof Path && !result.payload)) {\n        return\n      }\n\n      const message = this.safeStringify({\n        type: 'executionFunctionEnd',\n        source: source,\n        version: this.version,\n        data: {\n          execution: {\n            executionId: execution.id,\n            functionIndex: funcDetails.functionIndex,\n            output: result instanceof Path ? result.payload : result,\n          },\n        },\n      })\n\n      this.sendExecutionMessage(message)\n    })\n    tree.on('error', (error, execution, funcDetails) => {\n      const message = JSON.stringify({\n        type: 'executionFunctionError',\n        source: source,\n        version: this.version,\n        data: {\n          execution: {\n            executionId: execution.id,\n            functionIndex: funcDetails.functionIndex,\n            error: {\n              name: error.name,\n              message: error.message,\n              stack: error.stack,\n              func: funcDetails.function.toString(),\n            },\n          },\n        },\n      })\n\n      this.sendExecutionMessage(message)\n    })\n  }\n  safeStringify(object) {\n    const refs = []\n\n    return JSON.stringify(object, (key, value) => {\n      const isObject =\n        typeof value === 'object' && value !== null && !Array.isArray(value)\n\n      if (isObject && refs.indexOf(value) > -1) {\n        return '[CIRCULAR]'\n      } else if (isObject) {\n        refs.push(value)\n      }\n\n      return value\n    })\n  }\n  sendExecutionMessage(message) {\n    if (this.isConnected) {\n      this.sendMessage(message)\n    } else {\n      this.backlog.push(message)\n    }\n  }\n  sendInitial() {}\n  createExecutionMessage(debuggingData, execution, functionDetails, payload) {}\n  /*\n    Sends execution data to the debugger. Whenever a signal starts\n    it will send a message to the debugger, but any functions in the\n    function tree might also use this to send debugging data. Like when\n    mutations are done or any wrapped methods run.\n  */\n  sendExecutionData(debuggingData, execution, functionDetails, payload) {\n    const message = this.createExecutionMessage(\n      debuggingData,\n      execution,\n      functionDetails,\n      payload\n    )\n\n    this.sendExecutionMessage(message)\n  }\n}\n\nexport default DevtoolsBase\n"]}
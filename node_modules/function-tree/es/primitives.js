var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

export var Primitive = function () {
  function Primitive(type) {
    _classCallCheck(this, Primitive);

    this.type = type;

    if (typeof (arguments.length <= 1 ? undefined : arguments[1]) === 'string') {
      this.name = arguments.length <= 1 ? undefined : arguments[1];
      this.items = arguments.length <= 2 ? undefined : arguments[2];
    } else {
      this.name = null;
      this.items = arguments.length <= 1 ? undefined : arguments[1];
    }

    if (!Array.isArray(this.items)) {
      this.items = [this.items];
    }
  }

  _createClass(Primitive, [{
    key: 'toJSON',
    value: function toJSON() {
      return {
        name: this.name,
        _functionTreePrimitive: true,
        type: this.type,
        items: this.items
      };
    }
  }]);

  return Primitive;
}();

export var Sequence = function (_Primitive) {
  _inherits(Sequence, _Primitive);

  function Sequence() {
    var _ref;

    _classCallCheck(this, Sequence);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _possibleConstructorReturn(this, (_ref = Sequence.__proto__ || Object.getPrototypeOf(Sequence)).call.apply(_ref, [this, 'sequence'].concat(args)));
  }

  return Sequence;
}(Primitive);

export var Parallel = function (_Primitive2) {
  _inherits(Parallel, _Primitive2);

  function Parallel() {
    var _ref2;

    _classCallCheck(this, Parallel);

    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    return _possibleConstructorReturn(this, (_ref2 = Parallel.__proto__ || Object.getPrototypeOf(Parallel)).call.apply(_ref2, [this, 'parallel'].concat(args)));
  }

  return Parallel;
}(Primitive);
//# sourceMappingURL=primitives.js.map
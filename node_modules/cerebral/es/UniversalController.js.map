{"version":3,"sources":["../src/UniversalController.js"],"names":["Controller","ensurePath","throwError","getModule","UniversalController","rootModule","controllerOptions","changes","model","state","JSON","parse","stringify","trackChanges","bind","on","hasRun","concat","reduce","change","path","join","getState","getChanges","sequence","payload","signalRun","Array","isArray","run","pathArray","signalKey","pop","module","signalDefinition","signals","signal","value","set","flush"],"mappings":";;;;;;;;AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,SAASC,UAAT,EAAqBC,UAArB,EAAiCC,SAAjC,QAAkD,SAAlD;;IAEMC,mB;;;AACJ,+BAAYC,UAAZ,EAAwBC,iBAAxB,EAA2C;AAAA;;AAAA,0IACnCD,UADmC,EACvBC,iBADuB;;AAEzC,UAAKC,OAAL,GAAe,EAAf;AACA,UAAKC,KAAL,CAAWC,KAAX,GAAmBC,KAAKC,KAAL,CAAWD,KAAKE,SAAL,CAAe,MAAKJ,KAAL,CAAWC,KAA1B,CAAX,CAAnB;AACA,UAAKI,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,OAApB;AACA,UAAKC,EAAL,CAAQ,OAAR,EAAiB,MAAKF,YAAtB;AACA,UAAKG,MAAL,GAAc,KAAd;AANyC;AAO1C;;;;iCACYT,O,EAAS;AACpB,WAAKA,OAAL,GAAe,KAAKA,OAAL,CAAaU,MAAb,CAAoBV,OAApB,CAAf;AACD;;;iCACY;AAAA;;AACX,aAAO,KAAKA,OAAL,CAAaW,MAAb,CAAoB,UAACX,OAAD,EAAUY,MAAV,EAAqB;AAC9CZ,gBAAQY,OAAOC,IAAP,CAAYC,IAAZ,CAAiB,GAAjB,CAAR,IAAiC,OAAKC,QAAL,CAAcH,OAAOC,IAArB,CAAjC;;AAEA,eAAOb,OAAP;AACD,OAJM,EAIJ,EAJI,CAAP;AAKD;;;gCACW;AACV,UAAME,QAAQC,KAAKE,SAAL,CAAe,KAAKW,UAAL,EAAf,CAAd;;AAEA,WAAKP,MAAL,GAAc,IAAd;AACA,kDAA0CP,KAA1C;AACD;;;gCACWe,Q,EAAUC,O,EAAS;AAC7B,UAAIC,kBAAJ;;AAEA,UAAIC,MAAMC,OAAN,CAAcJ,QAAd,CAAJ,EAA6B;AAC3BE,oBAAY,KAAKG,GAAL,CAAS,yBAAT,EAAoCL,QAApC,EAA8CC,OAA9C,CAAZ;AACD,OAFD,MAEO,IAAI,OAAOD,QAAP,KAAoB,QAAxB,EAAkC;AACvC,YAAMM,YAAY7B,WAAWuB,QAAX,CAAlB;AACA,YAAMO,YAAYD,UAAUE,GAAV,EAAlB;AACA,YAAMC,SAAS9B,UAAU2B,SAAV,EAAqB,KAAKG,MAA1B,CAAf;AACA,YAAMC,mBAAmBD,UAAUA,OAAOE,OAAP,CAAeJ,SAAf,CAAnC;;AAEAL,oBAAY,KAAKG,GAAL,CAASL,QAAT,EAAmBU,iBAAiBE,MAApC,EAA4CX,OAA5C,CAAZ;AACD,OAPM,MAOA;AACLvB,mBAAW,uDAAX;AACD;;AAED,aAAOwB,SAAP;AACD;;;6BACQN,I,EAAMiB,K,EAAO;AACpB,WAAK7B,KAAL,CAAW8B,GAAX,CAAerC,WAAWmB,IAAX,CAAf,EAAiCiB,KAAjC;AACA,WAAKE,KAAL,CAAW,IAAX,EAFoB,CAEH;AAClB;;;;EA9C+BvC,U;;AAiDlC,eAAeI,mBAAf","file":"UniversalController.js","sourcesContent":["import Controller from './Controller'\nimport { ensurePath, throwError, getModule } from './utils'\n\nclass UniversalController extends Controller {\n  constructor(rootModule, controllerOptions) {\n    super(rootModule, controllerOptions)\n    this.changes = []\n    this.model.state = JSON.parse(JSON.stringify(this.model.state))\n    this.trackChanges = this.trackChanges.bind(this)\n    this.on('flush', this.trackChanges)\n    this.hasRun = false\n  }\n  trackChanges(changes) {\n    this.changes = this.changes.concat(changes)\n  }\n  getChanges() {\n    return this.changes.reduce((changes, change) => {\n      changes[change.path.join('.')] = this.getState(change.path)\n\n      return changes\n    }, {})\n  }\n  getScript() {\n    const state = JSON.stringify(this.getChanges())\n\n    this.hasRun = true\n    return `<script>window.CEREBRAL_STATE = ${state}</script>`\n  }\n  runSequence(sequence, payload) {\n    let signalRun\n\n    if (Array.isArray(sequence)) {\n      signalRun = this.run('UniversalController.run', sequence, payload)\n    } else if (typeof sequence === 'string') {\n      const pathArray = ensurePath(sequence)\n      const signalKey = pathArray.pop()\n      const module = getModule(pathArray, this.module)\n      const signalDefinition = module && module.signals[signalKey]\n\n      signalRun = this.run(sequence, signalDefinition.signal, payload)\n    } else {\n      throwError('Sequence must be a signal-path or an array of action.')\n    }\n\n    return signalRun\n  }\n  setState(path, value) {\n    this.model.set(ensurePath(path), value)\n    this.flush(true) // Track changes.\n  }\n}\n\nexport default UniversalController\n"]}
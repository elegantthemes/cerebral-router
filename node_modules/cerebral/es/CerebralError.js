function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import ExtendableError from 'es6-error';

var CerebralError = function (_ExtendableError) {
  _inherits(CerebralError, _ExtendableError);

  function CerebralError(message, details) {
    _classCallCheck(this, CerebralError);

    var _this = _possibleConstructorReturn(this, (CerebralError.__proto__ || Object.getPrototypeOf(CerebralError)).call(this, message));

    _this.name = 'CerebralError';
    _this.details = details;
    _this.toJSON = function () {
      var _this2 = this;

      return Object.getOwnPropertyNames(this).reduce(function (props, key) {
        if (!['toJSON', 'execution', 'functionDetails'].includes(key)) {
          props[key] = _this2[key];
        }

        return props;
      }, {});
    };
    return _this;
  }

  return CerebralError;
}(ExtendableError);

export default CerebralError;
//# sourceMappingURL=CerebralError.js.map
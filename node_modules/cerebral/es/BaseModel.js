var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { extractModuleProp } from './utils';
import StateProvider from './providers/State';

var BaseModel = function () {
  function BaseModel(controller) {
    _classCallCheck(this, BaseModel);

    this.initialState = extractModuleProp(controller.module, 'state');
    this.StateProvider = StateProvider;
    this.changedPaths = [];

    controller.on('moduleAdded', this.onModuleAdded.bind(this));
    controller.on('moduleRemoved', this.onModuleRemoved.bind(this));
  }

  _createClass(BaseModel, [{
    key: 'onModuleAdded',
    value: function onModuleAdded(path, module) {
      this.set(path, module.state);
    }
  }, {
    key: 'onModuleRemoved',
    value: function onModuleRemoved(path) {
      this.unset(path);
    }
  }, {
    key: 'flush',
    value: function flush() {
      var changes = this.changedPaths.slice();

      this.changedPaths = [];

      return changes;
    }
  }]);

  return BaseModel;
}();

export default BaseModel;
//# sourceMappingURL=BaseModel.js.map
function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { ensurePath, throwError } from '../utils';
import Provider from '../Provider';
import { methods } from './State';

export default function ModuleProviderFactory(devtools) {
  return Provider(methods.reduce(function (currentState, methodKey) {
    currentState[methodKey] = function () {
      var _context$state;

      var path = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];

      path = ensurePath(path);
      var signalPath = this.context.execution.name.split('.');
      var modulePath = signalPath.splice(0, signalPath.length - 1);

      for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        args[_key - 1] = arguments[_key];
      }

      return (_context$state = this.context.state)[methodKey].apply(_context$state, [modulePath.concat(path)].concat(args));
    };

    return currentState;
  }, {}), {
    wrap: devtools ? function (context, functionDetails) {
      return methods.reduce(function (currentState, methodKey) {
        if (methodKey === 'get' || methodKey === 'compute') {
          currentState[methodKey] = function (path) {
            path = ensurePath(path);
            var signalPath = context.execution.name.split('.');
            var modulePath = signalPath.splice(0, signalPath.length - 1);

            path = modulePath.concat(path);

            return context.state[methodKey](path);
          };
        } else {
          var originFunc = context.state[methodKey];

          currentState[methodKey] = function () {
            for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
              args[_key2] = arguments[_key2];
            }

            var argsCopy = args.slice();
            var path = ensurePath(argsCopy.shift());
            var signalPath = context.execution.name.split('.');
            var modulePath = signalPath.splice(0, signalPath.length - 1);

            path = modulePath.concat(path);

            context.debugger.send({
              datetime: Date.now(),
              type: 'mutation',
              color: '#333',
              method: 'module.' + methodKey,
              args: [path].concat(_toConsumableArray(argsCopy))
            });

            try {
              originFunc.apply(context.state, [path].concat(_toConsumableArray(argsCopy)));
            } catch (e) {
              var signalName = context.execution.name;
              throwError('The Signal "' + signalName + '" with action "' + functionDetails.name + '" has an error: ' + e.message);
            }
          };
        }

        return currentState;
      }, {});
    } : false
  });
}
//# sourceMappingURL=Module.js.map
{"version":3,"sources":["../../src/providers/Module.js"],"names":["ensurePath","throwError","Provider","methods","ModuleProviderFactory","devtools","reduce","currentState","methodKey","path","signalPath","context","execution","name","split","modulePath","splice","length","args","state","concat","wrap","functionDetails","originFunc","argsCopy","slice","shift","debugger","send","datetime","Date","now","type","color","method","apply","e","signalName","message"],"mappings":"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","file":"Module.js","sourcesContent":["import { ensurePath, throwError } from '../utils'\nimport Provider from '../Provider'\nimport { methods } from './State'\n\nexport default function ModuleProviderFactory(devtools) {\n  return Provider(\n    methods.reduce((currentState, methodKey) => {\n      currentState[methodKey] = function(path = [], ...args) {\n        path = ensurePath(path)\n        const signalPath = this.context.execution.name.split('.')\n        const modulePath = signalPath.splice(0, signalPath.length - 1)\n\n        return this.context.state[methodKey](modulePath.concat(path), ...args)\n      }\n\n      return currentState\n    }, {}),\n    {\n      wrap: devtools\n        ? (context, functionDetails) => {\n            return methods.reduce((currentState, methodKey) => {\n              if (methodKey === 'get' || methodKey === 'compute') {\n                currentState[methodKey] = (path) => {\n                  path = ensurePath(path)\n                  const signalPath = context.execution.name.split('.')\n                  const modulePath = signalPath.splice(0, signalPath.length - 1)\n\n                  path = modulePath.concat(path)\n\n                  return context.state[methodKey](path)\n                }\n              } else {\n                const originFunc = context.state[methodKey]\n\n                currentState[methodKey] = (...args) => {\n                  const argsCopy = args.slice()\n                  let path = ensurePath(argsCopy.shift())\n                  const signalPath = context.execution.name.split('.')\n                  const modulePath = signalPath.splice(0, signalPath.length - 1)\n\n                  path = modulePath.concat(path)\n\n                  context.debugger.send({\n                    datetime: Date.now(),\n                    type: 'mutation',\n                    color: '#333',\n                    method: `module.${methodKey}`,\n                    args: [path, ...argsCopy],\n                  })\n\n                  try {\n                    originFunc.apply(context.state, [path, ...argsCopy])\n                  } catch (e) {\n                    const signalName = context.execution.name\n                    throwError(\n                      `The Signal \"${signalName}\" with action \"${\n                        functionDetails.name\n                      }\" has an error: ${e.message}`\n                    )\n                  }\n                }\n              }\n\n              return currentState\n            }, {})\n          }\n        : false,\n    }\n  )\n}\n"]}
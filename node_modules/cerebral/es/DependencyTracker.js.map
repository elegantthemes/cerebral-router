{"version":3,"sources":["../src/DependencyTracker.js"],"names":["dependencyMatch","getWithPath","ensureStrictPath","DependencyTracker","computed","propsTrackMap","stateTrackMap","propsTrackFlatMap","stateTrackFlatMap","value","stateGetter","props","newStateTrackMap","newPropsTrackMap","newPropsTrackFlatMap","newStateTrackFlatMap","propsGetter","hasChanged","setTrackMap","path","newTrackMap","pathArray","split","reduce","currentNewTrackMapLevel","key","index","length","children","getValue","state","strictPath","stateChanges","propsChanges","Boolean"],"mappings":";;;;AAAA,SAASA,eAAT,EAA0BC,WAA1B,EAAuCC,gBAAvC,QAA+D,SAA/D;;IAEMC,iB;AACJ,6BAAYC,QAAZ,EAAsB;AAAA;;AACpB,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKJ,QAAL,GAAgBA,QAAhB;AACA,SAAKK,KAAL,GAAa,IAAb;AACD;;;;wBAEGC,W,EAAaC,K,EAAO;AACtB,UAAMC,mBAAmB,EAAzB;AACA,UAAMC,mBAAmB,EAAzB;AACA,UAAMC,uBAAuB,EAA7B;AACA,UAAMC,uBAAuB,EAA7B;AACA,UAAMP,oBAAoB,KAAKA,iBAA/B;AACA,UAAMD,oBAAoB,KAAKA,iBAA/B;AACA,UAAMS,cAAcf,YAAYU,KAAZ,CAApB;AACA,UAAIM,aAAa,KAAjB;;AAEA,eAASC,WAAT,CAAqBC,IAArB,EAA2BC,WAA3B,EAAwC;AACtC,YAAMC,YAAYF,KAAKG,KAAL,CAAW,GAAX,CAAlB;AACAD,kBAAUE,MAAV,CAAiB,UAACC,uBAAD,EAA0BC,GAA1B,EAA+BC,KAA/B,EAAyC;AACxD,cAAI,CAACF,wBAAwBC,GAAxB,CAAL,EAAmC;AACjCR,yBAAa,IAAb;AACAO,oCAAwBC,GAAxB,IAA+B,EAA/B;AACD;;AAED,cAAIC,QAAQL,UAAUM,MAAV,GAAmB,CAA/B,EAAkC;AAChCH,oCAAwBC,GAAxB,EAA6BG,QAA7B,GACEJ,wBAAwBC,GAAxB,EAA6BG,QAA7B,IAAyC,EAD3C;AAED;;AAED,iBAAOJ,wBAAwBC,GAAxB,EAA6BG,QAApC;AACD,SAZD,EAYGR,WAZH;AAaD;;AAED,WAAKX,KAAL,GAAa,KAAKL,QAAL,CAAcyB,QAAd,CAAuB;AAClCC,aADkC,iBAC5BX,IAD4B,EACtB;AACV,cAAMV,QAAQC,YAAYS,IAAZ,CAAd;AACA,cAAMY,aAAa7B,iBAAiBiB,IAAjB,EAAuBV,KAAvB,CAAnB;;AAEAM,+BAAqBgB,UAArB,IAAmC,IAAnC;;AAEA,cAAI,CAACvB,kBAAkBuB,UAAlB,CAAL,EAAoCd,aAAa,IAAb;AACpCC,sBAAYa,UAAZ,EAAwBnB,gBAAxB;;AAEA,iBAAOH,KAAP;AACD,SAXiC;AAYlCE,aAZkC,iBAY5BQ,IAZ4B,EAYtB;AACVL,+BAAqBK,IAArB,IAA6B,IAA7B;;AAEA,cAAI,CAACZ,kBAAkBY,IAAlB,CAAL,EAA8BF,aAAa,IAAb;AAC9BC,sBAAYC,IAAZ,EAAkBN,gBAAlB;;AAEA,iBAAOG,YAAYG,IAAZ,CAAP;AACD;AAnBiC,OAAvB,CAAb;;AAsBA,WAAKb,aAAL,GAAqBM,gBAArB;AACA,WAAKP,aAAL,GAAqBQ,gBAArB;AACA,WAAKL,iBAAL,GAAyBO,oBAAzB;AACA,WAAKR,iBAAL,GAAyBO,oBAAzB;;AAEA,aAAOG,UAAP;AACD;;;0BAEKe,Y,EAAcC,Y,EAAc;AAChC,aACEC,QAAQlC,gBAAgBgC,YAAhB,EAA8B,KAAK1B,aAAnC,EAAkDqB,MAA1D,KACAO,QAAQlC,gBAAgBiC,YAAhB,EAA8B,KAAK5B,aAAnC,EAAkDsB,MAA1D,CAFF;AAID;;;;;;AAGH,eAAexB,iBAAf","file":"DependencyTracker.js","sourcesContent":["import { dependencyMatch, getWithPath, ensureStrictPath } from './utils'\n\nclass DependencyTracker {\n  constructor(computed) {\n    this.propsTrackMap = {}\n    this.stateTrackMap = {}\n    this.propsTrackFlatMap = {}\n    this.stateTrackFlatMap = {}\n    this.computed = computed\n    this.value = null\n  }\n\n  run(stateGetter, props) {\n    const newStateTrackMap = {}\n    const newPropsTrackMap = {}\n    const newPropsTrackFlatMap = {}\n    const newStateTrackFlatMap = {}\n    const stateTrackFlatMap = this.stateTrackFlatMap\n    const propsTrackFlatMap = this.propsTrackFlatMap\n    const propsGetter = getWithPath(props)\n    let hasChanged = false\n\n    function setTrackMap(path, newTrackMap) {\n      const pathArray = path.split('.')\n      pathArray.reduce((currentNewTrackMapLevel, key, index) => {\n        if (!currentNewTrackMapLevel[key]) {\n          hasChanged = true\n          currentNewTrackMapLevel[key] = {}\n        }\n\n        if (index < pathArray.length - 1) {\n          currentNewTrackMapLevel[key].children =\n            currentNewTrackMapLevel[key].children || {}\n        }\n\n        return currentNewTrackMapLevel[key].children\n      }, newTrackMap)\n    }\n\n    this.value = this.computed.getValue({\n      state(path) {\n        const value = stateGetter(path)\n        const strictPath = ensureStrictPath(path, value)\n\n        newStateTrackFlatMap[strictPath] = true\n\n        if (!stateTrackFlatMap[strictPath]) hasChanged = true\n        setTrackMap(strictPath, newStateTrackMap)\n\n        return value\n      },\n      props(path) {\n        newPropsTrackFlatMap[path] = true\n\n        if (!propsTrackFlatMap[path]) hasChanged = true\n        setTrackMap(path, newPropsTrackMap)\n\n        return propsGetter(path)\n      },\n    })\n\n    this.stateTrackMap = newStateTrackMap\n    this.propsTrackMap = newPropsTrackMap\n    this.stateTrackFlatMap = newStateTrackFlatMap\n    this.propsTrackFlatMap = newPropsTrackFlatMap\n\n    return hasChanged\n  }\n\n  match(stateChanges, propsChanges) {\n    return (\n      Boolean(dependencyMatch(stateChanges, this.stateTrackMap).length) ||\n      Boolean(dependencyMatch(propsChanges, this.propsTrackMap).length)\n    )\n  }\n}\n\nexport default DependencyTracker\n"]}
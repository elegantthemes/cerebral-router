import { createTemplateTag, extractValueWithPath } from 'function-tree';

export { createTemplateTag, extractValueWithPath, resolveObject, ResolveValue, Tag } from 'function-tree';

export var string = createTemplateTag('string', function (path) {
  return path;
});

export var signal = createTemplateTag('signal', function (path, context) {
  // View
  if (typeof context.signal === 'function') {
    return context.signal(path);
  }

  return context.controller.getSignal(path);
});

export var signals = createTemplateTag('signals', function (path, context) {
  // View
  if (typeof context.signal === 'function') {
    return context.signals(path);
  }

  return context.controller.getSignals(path);
});

export var state = createTemplateTag('state', function (path, context) {
  // Computed tracking and View
  if (typeof context.state === 'function') {
    return context.state(path);
  }

  return context.state.get(path);
});

export var module = createTemplateTag('module', function (path, context) {
  return context.module.get(path);
});

export var props = createTemplateTag('props', function (path, context) {
  // Computed tracking and View
  if (typeof context.props === 'function') {
    return context.props(path);
  }

  return extractValueWithPath(context.props, path);
});
//# sourceMappingURL=index.js.map
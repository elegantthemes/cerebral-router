function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

import { Tag } from '../tags';

var HELP_URL = 'http://cerebraljs.com/docs/api/operators.html#when';

function whenFactory() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var whenFunc = args.length > 1 ? args[args.length - 1] : null;
  var valueTemplates = args.length > 1 ? args.slice(0, -1) : args;
  function when(_ref) {
    var path = _ref.path,
        resolve = _ref.resolve;

    if (valueTemplates.length > 0 && !(valueTemplates[0] instanceof Tag)) {
      throw new Error('Cerebral operator.when: You have to use the STATE, MODULE or PROPS tag as values, see: ' + HELP_URL);
    }
    if (!path || !path.true || !path.false) {
      throw new Error('Cerebral operator.when: true/false paths need to be provided, see: http://cerebraljs.com/docs/api/operators.html#when');
    }
    var values = valueTemplates.map(function (value) {
      return resolve.value(value);
    });
    var isTrue = Boolean(whenFunc ? whenFunc.apply(undefined, _toConsumableArray(values)) : values[0]);

    return isTrue ? path.true() : path.false();
  }

  when.displayName = 'operator.when(' + args.filter(function (arg) {
    return typeof arg !== 'function';
  }).map(function (arg) {
    return String(arg);
  }).join(',') + ')';

  return when;
}

export default whenFactory;
//# sourceMappingURL=when.js.map
{"version":3,"sources":["../../src/operators/increment.js"],"names":["target","value","increment","state","module","props","resolve","isTag","Error","resolvedValue","Number","isInteger","invalidStateMsg","type","path","result","Object","assign","parts","split","key","pop","targetObj","reduce","displayName","String"],"mappings":"AAAA,eAAe,UAASA,MAAT,EAA4B;AAAA,MAAXC,KAAW,uEAAH,CAAG;;AACzC,WAASC,SAAT,OAAsD;AAAA,QAAjCC,KAAiC,QAAjCA,KAAiC;AAAA,QAA1BC,MAA0B,QAA1BA,MAA0B;AAAA,QAAlBC,KAAkB,QAAlBA,KAAkB;AAAA,QAAXC,OAAW,QAAXA,OAAW;;AACpD,QAAI,CAACA,QAAQC,KAAR,CAAcP,MAAd,EAAsB,OAAtB,EAA+B,OAA/B,EAAwC,QAAxC,CAAL,EAAwD;AACtD,YAAM,IAAIQ,KAAJ,CACJ,+FADI,CAAN;AAGD;;AAED,QAAIC,gBAAgBH,QAAQL,KAAR,CAAcA,KAAd,CAApB;;AAEA,QAAI,CAACS,OAAOC,SAAP,CAAiBF,aAAjB,CAAL,EAAsC;AACpC,YAAM,IAAID,KAAJ,CACJ,mEADI,CAAN;AAGD;;AAED,QAAMI,kBACJ,gEADF;AAEA,QAAIZ,OAAOa,IAAP,KAAgB,OAApB,EAA6B;AAC3BV,YAAMD,SAAN,CAAgBI,QAAQQ,IAAR,CAAad,MAAb,CAAhB,EAAsCS,aAAtC;AACD,KAFD,MAEO,IAAIT,OAAOa,IAAP,KAAgB,QAApB,EAA8B;AACnCT,aAAOF,SAAP,CAAiBI,QAAQQ,IAAR,CAAad,MAAb,CAAjB,EAAuCS,aAAvC;AACD,KAFM,MAEA;AACL,UAAMM,SAASC,OAAOC,MAAP,CAAc,EAAd,EAAkBZ,KAAlB,CAAf;AACA,UAAMa,QAAQZ,QAAQQ,IAAR,CAAad,MAAb,EAAqBmB,KAArB,CAA2B,GAA3B,CAAd;AACA,UAAMC,MAAMF,MAAMG,GAAN,EAAZ;AACA,UAAMC,YAAYJ,MAAMK,MAAN,CAAa,UAACvB,MAAD,EAASoB,GAAT,EAAiB;AAC9C,eAAQpB,OAAOoB,GAAP,IAAcJ,OAAOC,MAAP,CAAc,EAAd,EAAkBjB,OAAOoB,GAAP,KAAe,EAAjC,CAAtB;AACD,OAFiB,EAEfL,MAFe,CAAlB;;AAIA,UAAI,CAACL,OAAOC,SAAP,CAAiBW,UAAUF,GAAV,CAAjB,CAAL,EAAuC;AACrC,cAAM,IAAIZ,KAAJ,CAAUI,eAAV,CAAN;AACD;;AAEDU,gBAAUF,GAAV,KAAkBX,aAAlB;;AAEA,aAAOM,MAAP;AACD;AACF;;AAEDb,YAAUsB,WAAV,2BAA8CC,OAAOzB,MAAP,CAA9C,UAAiEyB,OAC/DxB,KAD+D,CAAjE;;AAIA,SAAOC,SAAP;AACD","file":"increment.js","sourcesContent":["export default function(target, value = 1) {\n  function increment({ state, module, props, resolve }) {\n    if (!resolve.isTag(target, 'state', 'props', 'module')) {\n      throw new Error(\n        'Cerebral operator.increment: You have to use the STATE, MODULE or PROPS tag as first argument'\n      )\n    }\n\n    let resolvedValue = resolve.value(value)\n\n    if (!Number.isInteger(resolvedValue)) {\n      throw new Error(\n        'Cerebral operator.increment: You must increment by integer values'\n      )\n    }\n\n    const invalidStateMsg =\n      'Cerebral operator.increment: You must increment integer values'\n    if (target.type === 'state') {\n      state.increment(resolve.path(target), resolvedValue)\n    } else if (target.type === 'module') {\n      module.increment(resolve.path(target), resolvedValue)\n    } else {\n      const result = Object.assign({}, props)\n      const parts = resolve.path(target).split('.')\n      const key = parts.pop()\n      const targetObj = parts.reduce((target, key) => {\n        return (target[key] = Object.assign({}, target[key] || {}))\n      }, result)\n\n      if (!Number.isInteger(targetObj[key])) {\n        throw new Error(invalidStateMsg)\n      }\n\n      targetObj[key] += resolvedValue\n\n      return result\n    }\n  }\n\n  increment.displayName = `operator.increment(${String(target)}, ${String(\n    value\n  )})`\n\n  return increment\n}\n"]}
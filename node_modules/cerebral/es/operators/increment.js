export default function (target) {
  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;

  function increment(_ref) {
    var state = _ref.state,
        module = _ref.module,
        props = _ref.props,
        resolve = _ref.resolve;

    if (!resolve.isTag(target, 'state', 'props', 'module')) {
      throw new Error('Cerebral operator.increment: You have to use the STATE, MODULE or PROPS tag as first argument');
    }

    var resolvedValue = resolve.value(value);

    if (!Number.isInteger(resolvedValue)) {
      throw new Error('Cerebral operator.increment: You must increment by integer values');
    }

    var invalidStateMsg = 'Cerebral operator.increment: You must increment integer values';
    if (target.type === 'state') {
      state.increment(resolve.path(target), resolvedValue);
    } else if (target.type === 'module') {
      module.increment(resolve.path(target), resolvedValue);
    } else {
      var result = Object.assign({}, props);
      var parts = resolve.path(target).split('.');
      var key = parts.pop();
      var targetObj = parts.reduce(function (target, key) {
        return target[key] = Object.assign({}, target[key] || {});
      }, result);

      if (!Number.isInteger(targetObj[key])) {
        throw new Error(invalidStateMsg);
      }

      targetObj[key] += resolvedValue;

      return result;
    }
  }

  increment.displayName = 'operator.increment(' + String(target) + ', ' + String(value) + ')';

  return increment;
}
//# sourceMappingURL=increment.js.map
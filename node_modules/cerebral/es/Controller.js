var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import DependencyStore from './DependencyStore';
import BaseController from './BaseController';
import Model from './Model';

/*
  The controller is where everything is attached. The devtools
  is attached directly. Also a top level module is created.
  The controller creates the function tree that will run all signals,
  based on top level providers and providers defined in modules
*/

var Controller = function (_BaseController) {
  _inherits(Controller, _BaseController);

  function Controller(rootModule, options) {
    _classCallCheck(this, Controller);

    var _this = _possibleConstructorReturn(this, (Controller.__proto__ || Object.getPrototypeOf(Controller)).call(this, rootModule, Object.assign({
      Model: Model
    }, options)));

    _this.componentDependencyStore = new DependencyStore();
    _this.flush = _this.flush.bind(_this);

    _this.on('asyncFunction', function (execution, funcDetails) {
      if (!funcDetails.isParallel) {
        _this.flush();
      }
    });
    _this.on('parallelStart', function () {
      return _this.flush();
    });
    _this.on('parallelProgress', function (execution, currentPayload, functionsResolving) {
      if (functionsResolving === 1) {
        _this.flush();
      }
    });
    _this.on('end', function () {
      return _this.flush();
    });
    return _this;
  }
  /*
    Whenever components needs to be updated, this method
    can be called
  */


  _createClass(Controller, [{
    key: 'flush',
    value: function flush(force) {
      var changes = this.model.flush();

      if (!force && !Object.keys(changes).length) {
        return;
      }

      this.updateComponents(changes, force);
      this.emit('flush', changes, Boolean(force));
    }
  }, {
    key: 'updateComponents',
    value: function updateComponents(changes, force) {
      var _this2 = this;

      var componentsToRender = [];

      if (force) {
        componentsToRender = this.componentDependencyStore.getAllUniqueEntities();
      } else {
        componentsToRender = this.componentDependencyStore.getUniqueEntities(changes);
      }

      var start = Date.now();
      componentsToRender.forEach(function (component) {
        if (_this2.devtools) {
          _this2.devtools.updateComponentsMap(component);
        }
        component.onUpdate(changes, force);
      });
      var end = Date.now();

      if (this.devtools && componentsToRender.length) {
        this.devtools.sendComponentsMap(componentsToRender, changes, start, end);
      }
    }
  }]);

  return Controller;
}(BaseController);

export default Controller;
//# sourceMappingURL=Controller.js.map
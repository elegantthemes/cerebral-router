{"version":3,"sources":["../../src/test/index.js"],"names":["Path","Primitive","Controller","Module","ensurePath","cleanPath","default","Snapshot","runCompute","compute","fixtures","response","rootModule","state","signals","test","resolve","value","props","controller","getSignal","runSignal","signal","options","Promise","reject","recordActions","isSignal","Array","isArray","Object","assign","actionStart","execution","funcDetails","payload","singleAction","noDuplicateWarnings","console","warn","actionEnd","result","output","error","err","off","signalEnd","getState","on","CerebralTest","throwToConsole","model","getModel","setState","path","set","flush","get","runAction","action"],"mappings":"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","file":"index.js","sourcesContent":["import { Path, Primitive } from 'function-tree'\nimport { Controller, Module } from '..'\nimport { ensurePath, cleanPath } from '../utils'\n\nexport { default as Snapshot } from './snapshot'\n\nexport function runCompute(compute, fixtures = {}) {\n  let response\n  const rootModule = Module({\n    state: fixtures.state || {},\n    signals: {\n      test: [\n        ({ resolve }) => {\n          response = resolve.value(compute, fixtures.props)\n        },\n      ],\n    },\n  })\n  const controller = Controller(rootModule)\n  controller.getSignal('test')(fixtures.props)\n\n  return response\n}\n\nexport function runSignal(signal, fixtures = {}, options = {}) {\n  return new Promise((resolve, reject) => {\n    const recordActions =\n      options.recordActions && options.recordActions === 'byName'\n        ? 'name'\n        : 'functionIndex'\n    const isSignal = Array.isArray(signal) || signal instanceof Primitive\n    const controller =\n      options.controller ||\n      Controller(\n        Module(Object.assign({}, fixtures, isSignal && { signals: { signal } }))\n      )\n    const response = { controller }\n\n    const actionStart = function(execution, funcDetails, payload) {\n      if (options.singleAction) {\n        response.props = payload\n      } else {\n        if (\n          !options.noDuplicateWarnings &&\n          response[funcDetails[recordActions]]\n        ) {\n          console.warn(\n            `Cerebral[runSignal]: signal contains actions with duplicate names ('${\n              funcDetails[recordActions]\n            }')`\n          )\n        }\n        response[funcDetails[recordActions]] = { props: payload }\n      }\n    }\n\n    const actionEnd = function(execution, funcDetails, payload, result) {\n      if (!result || (result instanceof Path && !result.payload)) {\n        return\n      }\n      if (options.singleAction || response[funcDetails[recordActions]]) {\n        const output = result instanceof Path ? result.payload : result\n        if (options.singleAction) {\n          response.output = output\n        } else {\n          response[funcDetails[recordActions]].output = output\n        }\n      }\n    }\n\n    const error = function(err) {\n      off()\n      reject(err)\n    }\n\n    const signalEnd = () => {\n      off()\n      response.state = controller.getState()\n      resolve(response)\n    }\n\n    const off = function() {\n      controller.off('functionStart', actionStart)\n      controller.off('functionEnd', actionEnd)\n      controller.off('error', error)\n      controller.off('end', signalEnd)\n    }\n\n    controller.on('functionStart', actionStart)\n    controller.on('functionEnd', actionEnd)\n    controller.on('error', error)\n    controller.on('end', signalEnd)\n    controller.getSignal(isSignal ? 'signal' : signal)(fixtures.props)\n  })\n}\n\nexport function CerebralTest(rootModule, options = { throwToConsole: false }) {\n  const controller = Controller(rootModule, options)\n  const model = controller.getModel()\n  return {\n    controller,\n    runSignal(signal, props) {\n      return runSignal(\n        signal,\n        { props },\n        Object.assign({}, options, { controller, noDuplicateWarnings: true })\n      )\n    },\n    setState(path, value) {\n      model.set(ensurePath(cleanPath(path)), value)\n      model.flush()\n    },\n    getState(path) {\n      return model.get(ensurePath(cleanPath(path)))\n    },\n  }\n}\n\nexport function runAction(action, fixtures = {}) {\n  return runSignal([action], fixtures, {\n    recordActions: true,\n    singleAction: true,\n  })\n}\n"]}
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

import { throwError } from './utils';
import { Primitive } from 'function-tree';

var Module = function () {
  function Module(moduleDescription) {
    _classCallCheck(this, Module);

    this.moduleDescription = moduleDescription;
  }

  _createClass(Module, [{
    key: 'create',
    value: function create(controller, path) {
      var stringPath = path.join('.');
      var moduleStub = {
        controller: controller,
        path: stringPath,
        name: path.slice().pop()
      };

      var module = typeof this.moduleDescription === 'function' ? this.moduleDescription(moduleStub) : Object.assign({}, this.moduleDescription);

      /* Convert arrays to actually runable signals */
      module.signals = Object.keys(module.signals || {}).reduce(function (currentSignals, signalKey) {
        var signal = module.signals[signalKey];
        if (!(signal && (Array.isArray(signal) || typeof signal === 'function' || signal instanceof Primitive))) {
          throwError('Signal with name "' + signalKey + '" is not correctly defined. Please check that the signal is either a sequence, an array or a function.');
        }
        currentSignals[signalKey] = {
          signal: signal,
          run: function run(payload) {
            controller.runSignal(path.concat(signalKey).join('.'), signal, payload);
          }
        };

        return currentSignals;
      }, {});

      /* Instantiate submodules */
      module.modules = Object.keys(module.modules || {}).reduce(function (registered, moduleKey) {
        if (!module.modules[moduleKey].create) {
          throw new Error('You are not using the Module factory on module "' + moduleKey + '"');
        }

        registered[moduleKey] = module.modules[moduleKey].create(controller, path.concat(moduleKey));

        return registered;
      }, {});

      return module;
    }
  }]);

  return Module;
}();

export default Module;
//# sourceMappingURL=Module.js.map
{"version":3,"sources":["../src/Controller.js"],"names":["Controller","rootModule","options","Object","assign","Model","componentDependencyStore","flush","bind","on","execution","funcDetails","isParallel","currentPayload","functionsResolving","force","changes","model","keys","length","updateComponents","emit","Boolean","componentsToRender","getAllUniqueEntities","getUniqueEntities","start","Date","now","forEach","component","devtools","updateComponentsMap","onUpdate","end","sendComponentsMap"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;IAMMA,U;;;AACJ,sBAAYC,UAAZ,EAAwBC,OAAxB,EAAiC;AAAA;;AAAA,wHAE7BD,UAF6B,EAG7BE,OAAOC,MAAP,CACE;AACEC;AADF,KADF,EAIEH,OAJF,CAH6B;;AAW/B,UAAKI,wBAAL,GAAgC,+BAAhC;AACA,UAAKC,KAAL,GAAa,MAAKA,KAAL,CAAWC,IAAX,OAAb;;AAEA,UAAKC,EAAL,CAAQ,eAAR,EAAyB,UAACC,SAAD,EAAYC,WAAZ,EAA4B;AACnD,UAAI,CAACA,YAAYC,UAAjB,EAA6B;AAC3B,cAAKL,KAAL;AACD;AACF,KAJD;AAKA,UAAKE,EAAL,CAAQ,eAAR,EAAyB;AAAA,aAAM,MAAKF,KAAL,EAAN;AAAA,KAAzB;AACA,UAAKE,EAAL,CACE,kBADF,EAEE,UAACC,SAAD,EAAYG,cAAZ,EAA4BC,kBAA5B,EAAmD;AACjD,UAAIA,uBAAuB,CAA3B,EAA8B;AAC5B,cAAKP,KAAL;AACD;AACF,KANH;AAQA,UAAKE,EAAL,CAAQ,KAAR,EAAe;AAAA,aAAM,MAAKF,KAAL,EAAN;AAAA,KAAf;AA5B+B;AA6BhC;AACD;;;;;;;;0BAIMQ,K,EAAO;AACX,UAAMC,UAAU,KAAKC,KAAL,CAAWV,KAAX,EAAhB;;AAEA,UAAI,CAACQ,KAAD,IAAU,CAACZ,OAAOe,IAAP,CAAYF,OAAZ,EAAqBG,MAApC,EAA4C;AAC1C;AACD;;AAED,WAAKC,gBAAL,CAAsBJ,OAAtB,EAA+BD,KAA/B;AACA,WAAKM,IAAL,CAAU,OAAV,EAAmBL,OAAnB,EAA4BM,QAAQP,KAAR,CAA5B;AACD;;;qCACgBC,O,EAASD,K,EAAO;AAAA;;AAC/B,UAAIQ,qBAAqB,EAAzB;;AAEA,UAAIR,KAAJ,EAAW;AACTQ,6BAAqB,KAAKjB,wBAAL,CAA8BkB,oBAA9B,EAArB;AACD,OAFD,MAEO;AACLD,6BAAqB,KAAKjB,wBAAL,CAA8BmB,iBAA9B,CACnBT,OADmB,CAArB;AAGD;;AAED,UAAMU,QAAQC,KAAKC,GAAL,EAAd;AACAL,yBAAmBM,OAAnB,CAA2B,UAACC,SAAD,EAAe;AACxC,YAAI,OAAKC,QAAT,EAAmB;AACjB,iBAAKA,QAAL,CAAcC,mBAAd,CAAkCF,SAAlC;AACD;AACDA,kBAAUG,QAAV,CAAmBjB,OAAnB,EAA4BD,KAA5B;AACD,OALD;AAMA,UAAMmB,MAAMP,KAAKC,GAAL,EAAZ;;AAEA,UAAI,KAAKG,QAAL,IAAiBR,mBAAmBJ,MAAxC,EAAgD;AAC9C,aAAKY,QAAL,CAAcI,iBAAd,CAAgCZ,kBAAhC,EAAoDP,OAApD,EAA6DU,KAA7D,EAAoEQ,GAApE;AACD;AACF;;;;;;kBAGYlC,U","file":"Controller.js","sourcesContent":["import DependencyStore from './DependencyStore'\nimport BaseController from './BaseController'\nimport Model from './Model'\n\n/*\n  The controller is where everything is attached. The devtools\n  is attached directly. Also a top level module is created.\n  The controller creates the function tree that will run all signals,\n  based on top level providers and providers defined in modules\n*/\nclass Controller extends BaseController {\n  constructor(rootModule, options) {\n    super(\n      rootModule,\n      Object.assign(\n        {\n          Model,\n        },\n        options\n      )\n    )\n\n    this.componentDependencyStore = new DependencyStore()\n    this.flush = this.flush.bind(this)\n\n    this.on('asyncFunction', (execution, funcDetails) => {\n      if (!funcDetails.isParallel) {\n        this.flush()\n      }\n    })\n    this.on('parallelStart', () => this.flush())\n    this.on(\n      'parallelProgress',\n      (execution, currentPayload, functionsResolving) => {\n        if (functionsResolving === 1) {\n          this.flush()\n        }\n      }\n    )\n    this.on('end', () => this.flush())\n  }\n  /*\n    Whenever components needs to be updated, this method\n    can be called\n  */\n  flush(force) {\n    const changes = this.model.flush()\n\n    if (!force && !Object.keys(changes).length) {\n      return\n    }\n\n    this.updateComponents(changes, force)\n    this.emit('flush', changes, Boolean(force))\n  }\n  updateComponents(changes, force) {\n    let componentsToRender = []\n\n    if (force) {\n      componentsToRender = this.componentDependencyStore.getAllUniqueEntities()\n    } else {\n      componentsToRender = this.componentDependencyStore.getUniqueEntities(\n        changes\n      )\n    }\n\n    const start = Date.now()\n    componentsToRender.forEach((component) => {\n      if (this.devtools) {\n        this.devtools.updateComponentsMap(component)\n      }\n      component.onUpdate(changes, force)\n    })\n    const end = Date.now()\n\n    if (this.devtools && componentsToRender.length) {\n      this.devtools.sendComponentsMap(componentsToRender, changes, start, end)\n    }\n  }\n}\n\nexport default Controller\n"]}
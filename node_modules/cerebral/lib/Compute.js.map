{"version":3,"sources":["../src/Compute.js"],"names":["compute","Compute","args","value","context","computeGet","tag","getValue","result","reduce","details","arg","index","path","getPath","indexOf","results","push","Object","keys","slice","previousFuncIndex","length"],"mappings":";;;;;;;;;kBAyDwBA,O;;AAzDxB;;AACA;;;;;;;;;;IAEaC,O,WAAAA,O;;;AACX,mBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAEhB,UAAKA,IAAL,GAAYA,IAAZ;AACA,UAAKC,KAAL,GAAa,IAAb;AAHgB;AAIjB;;;;6BACQC,O,EAAS;AAChB,UAAMC,aAAa,SAAbA,UAAa,CAASC,GAAT,EAAc;AAC/B,eAAOA,IAAIC,QAAJ,CAAaH,OAAb,CAAP;AACD,OAFD;AAGA,UAAMI,SAAS,KAAKN,IAAL,CAAUO,MAAV,CACb,UAACC,OAAD,EAAUC,GAAV,EAAeC,KAAf,EAAyB;AACvB,YAAID,wBAAJ,EAAwB;AACtB,cAAME,OAAOF,IAAIG,OAAJ,CAAYV,OAAZ,CAAb;;AAEA,cAAIS,KAAKE,OAAL,CAAa,IAAb,IAAqB,CAAzB,EAA4B;AAC1B,gBAAMZ,QAAQQ,IAAIJ,QAAJ,CAAaH,OAAb,CAAd;;AAEAM,oBAAQM,OAAR,CAAgBC,IAAhB,CAAqBd,QAAQe,OAAOC,IAAP,CAAYhB,KAAZ,CAAR,GAA6B,EAAlD;AACD,WAJD,MAIO;AACLO,oBAAQM,OAAR,CAAgBC,IAAhB,CAAqBN,IAAIJ,QAAJ,CAAaH,OAAb,CAArB;AACD;;AAED,iBAAOM,OAAP;AACD,SAZD,MAYO,IAAIC,yCAAJ,EAAiC;AACtCD,kBAAQM,OAAR,CAAgBC,IAAhB,CAAqBN,IAAIJ,QAAJ,CAAaH,OAAb,CAArB;;AAEA,iBAAOM,OAAP;AACD,SAJM,MAIA,IAAI,OAAOC,GAAP,KAAe,UAAnB,EAA+B;AACpCD,kBAAQM,OAAR,CAAgBC,IAAhB,CACEN,wCACKD,QAAQM,OAAR,CAAgBI,KAAhB,CAAsBV,QAAQW,iBAA9B,EAAiDT,KAAjD,CADL,UAEEP,UAFF,GADF;AAMAK,kBAAQW,iBAAR,GAA4BT,KAA5B;;AAEA,iBAAOF,OAAP;AACD;;AAEDA,gBAAQM,OAAR,CAAgBC,IAAhB,CAAqBN,GAArB;;AAEA,eAAOD,OAAP;AACD,OAjCY,EAkCb;AACEM,iBAAS,EADX;AAEEK,2BAAmB;AAFrB,OAlCa,CAAf;;AAwCA,aAAOb,OAAOQ,OAAP,CAAeR,OAAOQ,OAAP,CAAeM,MAAf,GAAwB,CAAvC,CAAP;AACD;;;;;;AAGY,SAAStB,OAAT,GAA0B;AAAA,oCAANE,IAAM;AAANA,QAAM;AAAA;;AACvC,SAAO,IAAID,OAAJ,CAAYC,IAAZ,CAAP;AACD","file":"Compute.js","sourcesContent":["import { Tag } from './tags'\nimport { ResolveValue } from 'function-tree'\n\nexport class Compute extends ResolveValue {\n  constructor(args) {\n    super()\n    this.args = args\n    this.value = null\n  }\n  getValue(context) {\n    const computeGet = function(tag) {\n      return tag.getValue(context)\n    }\n    const result = this.args.reduce(\n      (details, arg, index) => {\n        if (arg instanceof Tag) {\n          const path = arg.getPath(context)\n\n          if (path.indexOf('.*') > 0) {\n            const value = arg.getValue(context)\n\n            details.results.push(value ? Object.keys(value) : [])\n          } else {\n            details.results.push(arg.getValue(context))\n          }\n\n          return details\n        } else if (arg instanceof ResolveValue) {\n          details.results.push(arg.getValue(context))\n\n          return details\n        } else if (typeof arg === 'function') {\n          details.results.push(\n            arg(\n              ...details.results.slice(details.previousFuncIndex, index),\n              computeGet\n            )\n          )\n          details.previousFuncIndex = index\n\n          return details\n        }\n\n        details.results.push(arg)\n\n        return details\n      },\n      {\n        results: [],\n        previousFuncIndex: 0,\n      }\n    )\n\n    return result.results[result.results.length - 1]\n  }\n}\n\nexport default function compute(...args) {\n  return new Compute(args)\n}\n"]}
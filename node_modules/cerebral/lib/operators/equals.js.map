{"version":3,"sources":["../../src/operators/equals.js"],"names":["equalsFactory","target","equals","path","resolve","isTag","Error","targetValue","value","otherwise","displayName","String"],"mappings":";;;;;AAAA,SAASA,aAAT,CAAuBC,MAAvB,EAA+B;AAC7B,WAASC,MAAT,OAAmC;AAAA,QAAjBC,IAAiB,QAAjBA,IAAiB;AAAA,QAAXC,OAAW,QAAXA,OAAW;;AACjC,QAAI,CAACA,QAAQC,KAAR,CAAcJ,MAAd,EAAsB,OAAtB,EAA+B,OAA/B,EAAwC,QAAxC,CAAL,EAAwD;AACtD,YAAM,IAAIK,KAAJ,CACJ,4FADI,CAAN;AAGD;;AAED,QAAMC,cAAcH,QAAQI,KAAR,CAAcP,MAAd,CAApB;;AAEA,WAAOE,KAAKI,WAAL,IAAoBJ,KAAKI,WAAL,GAApB,GAA0CJ,KAAKM,SAAL,EAAjD;AACD;;AAEDP,SAAOQ,WAAP,wBAAwCC,OAAOV,MAAP,CAAxC;;AAEA,SAAOC,MAAP;AACD;;kBAEcF,a","file":"equals.js","sourcesContent":["function equalsFactory(target) {\n  function equals({ path, resolve }) {\n    if (!resolve.isTag(target, 'state', 'props', 'module')) {\n      throw new Error(\n        'Cerebral operator.equals: You have to use the STATE, PROPS or MODULE tag as first argument'\n      )\n    }\n\n    const targetValue = resolve.value(target)\n\n    return path[targetValue] ? path[targetValue]() : path.otherwise()\n  }\n\n  equals.displayName = `operator.equals(${String(target)})`\n\n  return equals\n}\n\nexport default equalsFactory\n"]}
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (target) {
  for (var _len = arguments.length, values = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    values[_key - 1] = arguments[_key];
  }

  function merge(context) {
    var _context$target$type;

    if (!context.resolve.isTag(target, 'state', 'module')) {
      throw new Error('Cerebral operator.merge: You have to use the STATE or MODULE tag as first argument');
    }

    (_context$target$type = context[target.type]).merge.apply(_context$target$type, [context.resolve.path(target)].concat(_toConsumableArray(values.map(function (value) {
      if (context.resolve.isTag(value)) {
        return context.resolve.value(value);
      }

      return Object.keys(value).reduce(function (currentValue, key) {
        currentValue[key] = context.resolve.value(value[key]);

        return currentValue;
      }, {});
    }))));
  }

  merge.displayName = 'operator.merge(' + String(target) + ', ' + values.map(function (value) {
    return String(value);
  }).join(',') + ')';

  return merge;
};

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }
//# sourceMappingURL=merge.js.map
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _utils = require('./utils');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DependencyTracker = function () {
  function DependencyTracker(computed) {
    _classCallCheck(this, DependencyTracker);

    this.propsTrackMap = {};
    this.stateTrackMap = {};
    this.propsTrackFlatMap = {};
    this.stateTrackFlatMap = {};
    this.computed = computed;
    this.value = null;
  }

  _createClass(DependencyTracker, [{
    key: 'run',
    value: function run(stateGetter, props) {
      var newStateTrackMap = {};
      var newPropsTrackMap = {};
      var newPropsTrackFlatMap = {};
      var newStateTrackFlatMap = {};
      var stateTrackFlatMap = this.stateTrackFlatMap;
      var propsTrackFlatMap = this.propsTrackFlatMap;
      var propsGetter = (0, _utils.getWithPath)(props);
      var hasChanged = false;

      function setTrackMap(path, newTrackMap) {
        var pathArray = path.split('.');
        pathArray.reduce(function (currentNewTrackMapLevel, key, index) {
          if (!currentNewTrackMapLevel[key]) {
            hasChanged = true;
            currentNewTrackMapLevel[key] = {};
          }

          if (index < pathArray.length - 1) {
            currentNewTrackMapLevel[key].children = currentNewTrackMapLevel[key].children || {};
          }

          return currentNewTrackMapLevel[key].children;
        }, newTrackMap);
      }

      this.value = this.computed.getValue({
        state: function state(path) {
          var value = stateGetter(path);
          var strictPath = (0, _utils.ensureStrictPath)(path, value);

          newStateTrackFlatMap[strictPath] = true;

          if (!stateTrackFlatMap[strictPath]) hasChanged = true;
          setTrackMap(strictPath, newStateTrackMap);

          return value;
        },
        props: function props(path) {
          newPropsTrackFlatMap[path] = true;

          if (!propsTrackFlatMap[path]) hasChanged = true;
          setTrackMap(path, newPropsTrackMap);

          return propsGetter(path);
        }
      });

      this.stateTrackMap = newStateTrackMap;
      this.propsTrackMap = newPropsTrackMap;
      this.stateTrackFlatMap = newStateTrackFlatMap;
      this.propsTrackFlatMap = newPropsTrackFlatMap;

      return hasChanged;
    }
  }, {
    key: 'match',
    value: function match(stateChanges, propsChanges) {
      return Boolean((0, _utils.dependencyMatch)(stateChanges, this.stateTrackMap).length) || Boolean((0, _utils.dependencyMatch)(propsChanges, this.propsTrackMap).length);
    }
  }]);

  return DependencyTracker;
}();

exports.default = DependencyTracker;
//# sourceMappingURL=DependencyTracker.js.map
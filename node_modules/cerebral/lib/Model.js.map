{"version":3,"sources":["../src/Model.js"],"names":["Model","controller","devtools","state","warnStateProps","initialState","on","flush","path","cb","forceChildPathUpdates","length","reduce","currentState","key","index","Array","isArray","join","slice","currentValue","changedPaths","push","value","allowedTypes","values","forEach","verifyValue","method","args","emit","undefined","updateIn","_","parent","emitMutationEvent","array","Object","assign","get","prop","set","concat","pop","shift","unshift","verifyValues","splice","delta","Number","isInteger","Error"],"mappings":"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","file":"Model.js","sourcesContent":["import {\n  isObject,\n  isComplexObject,\n  isSerializable,\n  throwError,\n  forceSerializable,\n  addCerebralStateKey,\n} from './utils'\nimport BaseModel from './BaseModel'\n\nclass Model extends BaseModel {\n  constructor(controller) {\n    super(controller)\n    this.controller = controller\n    this.devtools = controller.devtools\n    this.state =\n      this.devtools && this.devtools.warnStateProps\n        ? addCerebralStateKey(this.initialState)\n        : this.initialState\n\n    controller.on('initialized', () => {\n      this.flush()\n    })\n  }\n  updateIn(path, cb, forceChildPathUpdates = false) {\n    if (!path.length) {\n      cb(this.state, this, 'state')\n\n      return\n    }\n\n    path.reduce((currentState, key, index) => {\n      if (index === path.length - 1) {\n        if (!Array.isArray(currentState) && !isObject(currentState)) {\n          throwError(\n            `The path \"${path.join('.')}\" is invalid. Path: \"${path\n              .slice(0, path.length - 1)\n              .join('.')}\" is type of \"${\n              currentState === null ? 'null' : typeof currentState\n            }\"`\n          )\n        }\n\n        const currentValue = currentState[key]\n\n        cb(currentState[key], currentState, key)\n        if (\n          currentState[key] !== currentValue ||\n          (isComplexObject(currentState[key]) && isComplexObject(currentValue))\n        ) {\n          this.changedPaths.push({\n            path,\n            forceChildPathUpdates,\n          })\n        }\n      } else if (!currentState[key]) {\n        currentState[key] = {}\n      }\n\n      return currentState[key]\n    }, this.state)\n  }\n  verifyValue(value, path) {\n    if (this.devtools && !isSerializable(value, this.devtools.allowedTypes)) {\n      throwError(\n        `You are passing a non serializable value into the state tree on path \"${path.join(\n          '.'\n        )}\"`\n      )\n    }\n    if (this.devtools) {\n      forceSerializable(value)\n    }\n    if (this.devtools && this.devtools.warnStateProps) {\n      addCerebralStateKey(value)\n    }\n  }\n  verifyValues(values, path) {\n    if (this.devtools) {\n      values.forEach((value) => {\n        this.verifyValue(value, path)\n      })\n    }\n  }\n  emitMutationEvent(method, path, ...args) {\n    this.controller.emit('mutation', {\n      method,\n      path,\n      args,\n    })\n  }\n  get(path = []) {\n    return path.reduce((currentState, key) => {\n      return currentState ? currentState[key] : undefined\n    }, this.state)\n  }\n  set(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(\n      path,\n      (_, parent, key) => {\n        parent[key] = value\n      },\n      true\n    )\n    this.emitMutationEvent('set', path, value)\n  }\n  toggle(path) {\n    this.updateIn(path, (value, parent, key) => {\n      parent[key] = !value\n    })\n    this.emitMutationEvent('toggle', path)\n  }\n  push(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(path, (array) => {\n      array.push(value)\n    })\n    this.emitMutationEvent('push', path, value)\n  }\n  merge(path, ...values) {\n    const value = Object.assign(...values)\n\n    // If we already have an object we make it behave\n    // like multiple sets, indicating a change to very key.\n    // If no value it should indicate that we are setting\n    // a new object\n    if (this.get(path)) {\n      for (let prop in value) {\n        this.set(path.concat(prop), value[prop])\n      }\n    } else {\n      this.set(path, value)\n    }\n    this.emitMutationEvent('merge', path, ...values)\n  }\n  pop(path) {\n    this.updateIn(path, (array) => {\n      array.pop()\n    })\n    this.emitMutationEvent('pop', path)\n  }\n  shift(path) {\n    this.updateIn(path, (array) => {\n      array.shift()\n    })\n    this.emitMutationEvent('shift', path)\n  }\n  unshift(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(path, (array) => {\n      array.unshift(value)\n    })\n    this.emitMutationEvent('unshift', path, value)\n  }\n  splice(path, ...args) {\n    this.verifyValues(args, path)\n    this.updateIn(path, (array) => {\n      array.splice(...args)\n    })\n    this.emitMutationEvent('splice', path, ...args)\n  }\n  unset(path) {\n    this.updateIn(\n      path,\n      (_, parent, key) => {\n        delete parent[key]\n      },\n      true\n    )\n    this.emitMutationEvent('unset', path)\n  }\n  concat(path, value) {\n    this.verifyValue(value, path)\n    this.updateIn(path, (array, parent, key) => {\n      parent[key] = array.concat(value)\n    })\n    this.emitMutationEvent('concat', path, value)\n  }\n  increment(path, delta = 1) {\n    if (!Number.isInteger(delta)) {\n      throw new Error(\n        'Cerebral state.increment: you must increment with integer values.'\n      )\n    }\n    this.updateIn(path, (value, parent, key) => {\n      if (!Number.isInteger(value)) {\n        throw new Error(\n          'Cerebral state.increment: you must increment integer values.'\n        )\n      }\n      parent[key] = value + delta\n    })\n    this.emitMutationEvent('increment', path, delta)\n  }\n}\n\nexport default Model\n"]}